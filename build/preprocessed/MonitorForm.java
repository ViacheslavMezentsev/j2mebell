
// <editor-fold defaultstate="collapsed" desc=" Подключаемые модули ">

import java.util.*;
import java.util.Calendar;
import java.io.DataOutputStream;
import java.io.IOException;

import javax.microedition.io.file.FileConnection;
import javax.microedition.io.Connector;
import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;

// Библиотека для сохранения изображений в png.
//import java.util.png.Encoder;

// </editor-fold>

public class MonitorForm extends Canvas implements CommandListener {

    public class FontType {

        static final public byte ОБЫЧНЫЙ = 0;
        static final public byte ТОНКИЙ = 1;
        static final public byte ЖИРНЫЙ = 2;
        static final public byte TRUETYPE = 3;
    }


    // <editor-fold defaultstate="collapsed" desc=" Поля класса ">

    static final public long МИЛЛСЕК_В_МИН = 60 * 1000L;
    static final public long МИЛЛСЕК_В_ЧАС = 60 * МИЛЛСЕК_В_МИН;
    static final public long МИЛЛСЕК_В_ДЕНЬ = 24 * МИЛЛСЕК_В_ЧАС;

    static final public byte КНОПКА_ЗВЁЗДОЧКА = Canvas.KEY_STAR;

    static final public byte КНОПКА_ВВОД = Canvas.FIRE;
    static final public byte КНОПКА_ВНИЗ = Canvas.DOWN;
    static final public byte КНОПКА_ВВЕРХ = Canvas.UP;
    static final public byte КНОПКА_ВПРАВО = Canvas.RIGHT;
    static final public byte КНОПКА_ВЛЕВО = Canvas.LEFT;

    static final public int FSizeX = 6;
    static final public int FSizeY = 6;

    // Некоторые телефоны не поддерживают прозрачность.
    static final public int ЦВЕТ_ГОЛУБОЙ = 0xFF0A50C8;
    static final public int ЦВЕТ_ЧЁРНЫЙ = 0xFF000000;
    static final public int ЦВЕТ_СЕРЫЙ = 0xFFDADADA;

    private int[] intPhoneCharDiv = { ( int ) 'А' - 192, ( int ) 'Ё' - 168, ( int )'ё' - 184 };
    public String InkFnt[] = {};

    private int ШиринаЭкрана;
    private int ВысотаЭкрана;
    private int ОтступXY;
    private int ШагСеткиXY;

    private int СчётчикСекунд = 0;

    private Command КомандаНазад;

    private Image ЭкранБуфер = null;
    private Image ВремяБуфер = null;
    private MIDlet Мидлет;
    private Display Дисплей;
    private Displayable РодительскоеОкно;
    private Schedules МенеджерРасписаний;
    private Scheduler Планировщик;
    private Settings Настройки;

    public Vector МассивЗвонков; // буфер для окна отображения
    public Timer Таймер;

    Vector МассивУроков;

    // </editor-fold>

    // <editor-fold desc=" Конструктор ">

    public MonitorForm( MIDlet Мидлет, Displayable Окно, Schedules Менеджер, Settings Настройки ) {

        super();

        this.Мидлет = Мидлет;
        Дисплей = Display.getDisplay( Мидлет );
        РодительскоеОкно = Окно;
        МенеджерРасписаний = Менеджер;
        this.Настройки = Настройки;

        // Создаём команды.
        КомандаНазад = new Command( "Назад", Command.BACK, 0 );

        // Добавляем команды.
        this.addCommand( КомандаНазад );

        // Установка обработчика событий Формы.
        this.setCommandListener( this );

        ШиринаЭкрана = Настройки.Монитор.ШиринаЭкрана;
        ВысотаЭкрана = Настройки.Монитор.ВысотаЭкрана;
        ОтступXY = Настройки.Монитор.ОтступXY;
        ШагСеткиXY = Настройки.Монитор.ШагСеткиXY;

        МассивЗвонков = new Vector();
        МассивУроков = new Vector();

        // Буфер для окна отображения.
//        if( !isDoubleBuffered() ) {
//
//            ЭкранБуфер = Image.createImage( ШиринаЭкрана, ВысотаЭкрана );
//        }

        ВремяБуфер = Image.createImage( 90, 25 );

        // Создаём экземпляр планировщика расписаний.
        Планировщик = new Scheduler( Мидлет, МенеджерРасписаний, Настройки );

        main.Логгер.info( "[MonitorForm.java]: MonitorForm()" );

    }

    // </editor-fold>

    // <editor-fold desc=" Методы класса ">

    public void Отобразить() {

        this.setFullScreenMode( Настройки.Монитор.ПолныйЭкран );

        // Запускаем таймер (движок).
        Таймер = new Timer();
        Таймер.schedule(
                new TimerTask() { public void run() { repaint(); } },
                1000, 1000 );

        // Доделать. Вычислять задержку в зависимости от скорости прорисовки экрана.
        // Прорисовку замерять в коде.

        Планировщик.Запуск();

        Дисплей.setCurrent( this );

    }


    public String КодВСимвол( int КодКнопки ) {

        switch ( КодКнопки ) {

            case Canvas.DOWN: return "ВНИЗ";

            case Canvas.FIRE: return "ВВОД";

            case Canvas.GAME_A: return "A";

            case Canvas.GAME_B: return "B";

            case Canvas.GAME_C: return "C";

            case Canvas.GAME_D: return "D";

            case Canvas.LEFT: return "ВЛЕВО";

            case Canvas.RIGHT: return "ВПРАВО";

            case Canvas.UP: return "ВВЕРХ";
        }

        return "-";
    }


    // Эта функция требует дополнительной памяти и работает только в симуляторе.
//    private void СохранитьСнимок( Image image ) {
//
//        if ( image == null ) return;
//
//        String FileName;
//
//        try {
//
//            FileConnection fc = null;
//            DataOutputStream dos = null;
//
//            Calendar Календарь = Calendar.getInstance();
//
//            long Сейчас = System.currentTimeMillis();
//
//            //long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
//            //Поправка /= Scheduler.СЕК_В_СУТКИ * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
//            long Поправка = Настройки.Основные.КолвоСуток;
//            Поправка *= Настройки.Основные.СуточнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
//            Поправка += МенеджерРасписаний.ДобавочнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
//
//            Календарь.setTime( new Date( Сейчас + Поправка ) );
//
//            int Год = Календарь.get( Calendar.YEAR );
//            int Месяц = Календарь.get( Calendar.MONTH ) + 1;
//            int Число = Календарь.get( Calendar.DAY_OF_MONTH );
//
//            int Минуты = Календарь.get( Calendar.MINUTE );
//            int Часы = Календарь.get( Calendar.HOUR_OF_DAY );
//            int Секунды = Календарь.get( Calendar.SECOND );
//
//            FileName = ( main.РЕЖИМ_СИМУЛЯТОРА ) ? "file:///root1/Мелодии/" : "file:///E:/Мелодии/" ;
//
//            FileName += "" + Год;
//            FileName += ( ( Месяц < 10 ) ? "0" : "") + Месяц;
//            FileName += ( ( Число < 10 ) ? "0" : "") + Число;
//
//            FileName += "-";
//
//            FileName += ( ( Часы < 10 ) ? "0" : "") + Часы;
//            FileName += ( ( Минуты < 10 ) ? "0" : "") + Минуты;
//            FileName += ( ( Секунды < 10 ) ? "0" : "") + Секунды;
//
//            FileName += "-monitor.png";
//
//            main.Логгер.info( "[MonitorForm.java]: Снимок в файл: " + FileName );
//
//            // Сохраняем картинку в файл.
//            fc = ( FileConnection ) Connector.open( FileName );
//
//            // Удаляем файл, если он существует.
//            if ( fc.exists() ) fc.delete();
//            fc.create();
//
//            // Получаем доступ к потоку файла.
//            dos = new DataOutputStream( fc.openOutputStream() );
//
//            // Сохраняем изображение в формате PNG.
//            dos.write( Encoder.toPNG( image ) );
//
//            dos.flush();
//            dos.close();
//
//            fc.close();
//
//        } catch ( IOException ex ) {
//
//            main.Логгер.error( "[MonitorForm.java]: " + ex.toString() );
//
//        } catch ( Exception ex ) {
//
//            main.Логгер.error( "[MonitorForm.java]: " + ex.toString() );
//        }
//
//    }


    // Печать символа нормальной толщины.
    public void PrintInkCharN( Graphics gg, int cchar, int cdx, int cdy, int mdx, int mdy ) {

        int i = 0;

        while ( InkFnt[ cchar ].charAt(i) != 'Z' ) {

            gg.drawLine(
                cdx + ( ( ( ( int ) InkFnt[ cchar ].charAt(i) ) - 48 ) * mdx / FSizeX ),
                cdy + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 1 ) ) - 48 ) * mdy / FSizeY ),
                cdx + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 2 ) ) - 48 ) * mdx / FSizeX ),
                cdy + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 3 ) ) - 48 ) * mdy / FSizeY )
                );

            i += 4;

        }

    }


    // Печать строки символами нормальной толщины.
    public void PrintInkLineN( Graphics gg, String cline, int cdx, int cdy, int mdx, int mdy ) {

        int ch;
        int k;

        for( int j = 0; j < cline.length(); j++ ) {

            ch = cline.charAt(j);

            // Русификация
            if ( ch >= 'А' && ch <= 'я' ) ch -= intPhoneCharDiv[0];
            if ( ch == 'Ё' ) ch-= intPhoneCharDiv[1];
            if ( ch == 'ё' ) ch-= intPhoneCharDiv[2];

            k = mdx / FSizeX;
            PrintInkCharN( gg, ch, ( j * k * ( FSizeX - 1 ) ) + cdx, cdy, mdx, mdy );

        }

    }


    // Печать символа жирным шрифтом.
    public void PrintInkCharB( Graphics gg, int cchar, int cdx, int cdy, int mdx, int mdy ) {

        int i = 0;

        // Русификация
        if ( cchar >= 'А' && cchar <= 'я' ) cchar -= intPhoneCharDiv[0];
        if ( cchar == 'Ё' ) cchar-= intPhoneCharDiv[1];
        if ( cchar == 'ё' ) cchar-= intPhoneCharDiv[2];

        while( InkFnt[ cchar ].charAt(i) != 'Z' ) {

            gg.drawLine(
                cdx + ( ( ( ( int ) InkFnt[ cchar ].charAt(i) ) - 48 ) * mdx / FSizeX ),
                cdy + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 1 ) ) - 48 ) * mdy / FSizeY ),
                cdx + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 2 ) ) - 48 ) * mdx / FSizeX ),
                cdy + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 3 ) ) - 48 ) * mdy / FSizeY )
                );

            gg.drawLine(
                cdx + 1 + ( ( ( ( int ) InkFnt[ cchar ].charAt(i) ) - 48 ) * mdx / FSizeX ),
                cdy + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 1 ) ) - 48 ) * mdy / FSizeY ),
                cdx + 1 + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 2 ) ) - 48 ) * mdx / FSizeX ),
                cdy + ( ( ( ( int ) InkFnt[ cchar ].charAt( i + 3 ) ) - 48 ) * mdy / FSizeY )
                );

            i += 4;

        }

    }


    // Печать строки жирным шрифтом.
    public void PrintInkLineB( Graphics gg, String cline, int cdx, int cdy, int mdx, int mdy ) {

        int ch;
        int k;

        for( int j = 0; j < cline.length(); j++ ){

            ch = cline.charAt(j);

            // Русификация.
            if ( ch >= 'А' && ch <= 'я' ) ch -= intPhoneCharDiv[0];
            if ( ch == 'Ё' ) ch-= intPhoneCharDiv[1];
            if ( ch == 'ё' ) ch-= intPhoneCharDiv[2];

            k = mdx / FSizeX;
            PrintInkCharB( gg, ch, ( j * k * ( FSizeX - 2 ) ) + cdx, cdy, mdx, mdy );

        }

    }


    // Легенда уроков и звонков.
    public void ПоказатьЛегенду( Graphics Холст, byte видШрифта, int Цвет ){

        if ( !Настройки.Монитор.логПоказатьЛегенду ) return;

        int КолвоЭлементов = 3;

        int Сверху = Настройки.Монитор.ДиаграммаОтступСверху + 50;
        int Слева = 5;
        int СтарыйЦвет = Холст.getColor();

        Schedules.ScheduleClass Расписание;
        Schedules.LessonClass Урок;
        Schedules.BellClass Звонок;

        Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt( Настройки.Расписания.ТекущееРасписание );

        int n = Расписание.Уроки.size();

        n = ( n >= КолвоЭлементов ) ? КолвоЭлементов : n;

        int k = 0;
        int dy = 15;
        String Текст;

        for ( Enumeration e = МассивУроков.elements(); e.hasMoreElements(); ) {

            Урок = ( Schedules.LessonClass ) e.nextElement();
            Текст = "";

            for ( Enumeration e1 = Урок.Звонки.elements(); e1.hasMoreElements(); ) {

                Звонок = ( Schedules.BellClass ) e1.nextElement();

                switch ( Звонок.Тип ) {

                    case Schedules.ТИП_НАЧАЛО:

                    case Schedules.ТИП_КОНЕЦ:

                        Текст += (( Звонок.цЧасы < 10) ? "0" : "") + Звонок.цЧасы +
                            ":" + (( Звонок.цМинуты < 10) ? "0" : "" ) + Звонок.цМинуты + " ";
                        break;

                } // switch

            }

            Текст += Урок.Название;

            switch ( видШрифта ) {

                case FontType.ОБЫЧНЫЙ:

                    dy = Холст.getFont().getHeight() * k++;
                    Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, Цвет, Font.SIZE_MEDIUM, Слева, Сверху + dy );
                    break;

                case FontType.ТОНКИЙ:
                case FontType.ЖИРНЫЙ:

                    int Масштаб = 2;
                    dy = FSizeY * Масштаб * k++;

                    ПоказатьТекст( Холст, Текст, видШрифта, Цвет, Масштаб, Слева, Сверху + dy  );
                    break;

                case FontType.TRUETYPE:

                    dy *= k++;

                    ПоказатьТекст( Холст, Текст, FontType.TRUETYPE, Цвет, 0, Слева, Сверху + dy );
                    break;

            }

        } // for

        Холст.setFont( Font.getDefaultFont() );
        Холст.setColor( СтарыйЦвет );

    }


    // Временная диаграмма.
    public void ПоказатьДиаграмму( Graphics Холст, int ШиринаЭкрана, int ОтступXY,
            int ДиаграммаОтступСверху, int ДиаграммаТолщинаПолосы, int ДлинаИнтервала ){

        if ( !Настройки.Монитор.логПоказатьДиаграмму ) return;

        // Отступы.
        int цСверху = ДиаграммаОтступСверху;
        int цСлева = ОтступXY;
        int цТолщинаПолосы = ДиаграммаТолщинаПолосы;

        Calendar Календарь = Calendar.getInstance();
        long Сейчас = System.currentTimeMillis();

//        long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
//        Поправка /= Scheduler.СЕК_В_СУТКИ * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
        long Поправка = Настройки.Основные.КолвоСуток;
        Поправка *= Настройки.Основные.СуточнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
        Поправка += МенеджерРасписаний.ДобавочнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;

        Календарь.setTime( new Date( Сейчас + Поправка ) );

        int цМинуты = Календарь.get( Calendar.MINUTE );
        int цЧасы = Календарь.get( Calendar.HOUR_OF_DAY );
        int цСекунды = Календарь.get( Calendar.SECOND );
        int цМиллисек = Календарь.get( Calendar.MILLISECOND );

        Сейчас = цЧасы * МИЛЛСЕК_В_ЧАС + цМинуты * МИЛЛСЕК_В_МИН + цСекунды * 1000L + цМиллисек;

        long цНачИнтерв, цКонИнтерв;

        // получаем текущую дату в миллисекундах.
        цНачИнтерв = System.currentTimeMillis();
        цКонИнтерв = цНачИнтерв;
        цНачИнтерв -= ( ДлинаИнтервала * МИЛЛСЕК_В_МИН ) / 2;
        цКонИнтерв += ( ДлинаИнтервала * МИЛЛСЕК_В_МИН ) / 2;

        Календарь.setTime( new Date( цНачИнтерв ) );
        int цНачЧас = Календарь.get( Calendar.HOUR_OF_DAY );
        int цНачМин = Календарь.get( Calendar.MINUTE );

        Календарь.setTime( new Date( цКонИнтерв ) );
        int цКонЧас = Календарь.get( Calendar.HOUR_OF_DAY );

        int КолТочек = ( цКонЧас > цНачЧас ) ? цКонЧас - цНачЧас : 24 - цНачЧас + цКонЧас ;

        // Отображаем точки на полосе диаграммы.
        String Текст;
        int цМеткаЧас = цНачЧас + 1;
        long цРасстМин;

        int СтарыйЦвет = Холст.getColor();
        Холст.setColor( 0, 0, 0 );

        Холст.drawRect( цСлева, цСверху, ШиринаЭкрана - 2 * ОтступXY - 1, цТолщинаПолосы );

        // Рисуем уроки.
        // Шаг 2. Отсеиваем те уроки, которые попадают в интервал диаграммы.
        Vector врмЗвонки = new Vector();
        цНачИнтерв = Сейчас - ( ДлинаИнтервала * МИЛЛСЕК_В_МИН ) / 2;
        цКонИнтерв = Сейчас + ( ДлинаИнтервала * МИЛЛСЕК_В_МИН ) / 2;

        long Время;
        Schedules.ScheduleClass Расписание;
        Schedules.LessonClass Урок;
        Schedules.BellClass Звонок;

        // Очистка буферов.
        МассивЗвонков.removeAllElements();
        МассивУроков.removeAllElements();

        try {

            Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt( Настройки.Расписания.ТекущееРасписание );

            for ( Enumeration e = Расписание.Уроки.elements(); e.hasMoreElements(); ) {

                Урок = ( Schedules.LessonClass ) e.nextElement();

                for ( Enumeration e1 = Урок.Звонки.elements(); e1.hasMoreElements(); ) {

                    Звонок = ( Schedules.BellClass ) e1.nextElement();
                    МассивЗвонков.addElement( Звонок );

                }

            }

        } catch ( Exception Исключение ) {

            main.Логгер.info( "[MonitorForm.java]: Ошибка при загрузке расписания. "
                    + Исключение.getMessage() );

            main.Логгер.info( "[MonitorForm.java]: Количество расписаний: "
                    + МенеджерРасписаний.Расписания.size() );

            main.Логгер.info( "[MonitorForm.java]: Номер загружаемого расписания: "
                    + Настройки.Расписания.ТекущееРасписание );

            return;

        }

        for ( Enumeration e = МассивЗвонков.elements(); e.hasMoreElements(); ) {

            Звонок = ( Schedules.BellClass ) e.nextElement();

            Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                    Звонок.цСекунды * 1000L;

            if ( ( Время >= цНачИнтерв ) && ( Время <= цКонИнтерв ) ) {

                врмЗвонки.addElement( Звонок );
            }

        }

        // Отображаем уроки в виде заполненных прямоугольников.
        // Перебираем все уроки текущего расписания, если урок попадает в интервал (даже частично)
        // то сохраняем его во временном списке.
        boolean ЕстьНачало, ЕстьКонец;
        boolean НачалоВинтервале, КонецВинтервале;
        Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt( Настройки.Расписания.ТекущееРасписание );

        for ( Enumeration e = Расписание.Уроки.elements(); e.hasMoreElements(); ) {

            Урок = ( Schedules.LessonClass ) e.nextElement();
            ЕстьНачало = false;
            ЕстьКонец = false;
            НачалоВинтервале = false;
            КонецВинтервале = false;

            // Если есть звонки начала и конца урока и хотя бы один из них попадает
            // в интервал окна отображения, то добавляем урок в список.
            for ( Enumeration e1 = Урок.Звонки.elements(); e1.hasMoreElements(); ) {

                Звонок = ( Schedules.BellClass ) e1.nextElement();

                if ( Звонок.Тип == Schedules.ТИП_НАЧАЛО ) {

                    ЕстьНачало = true;
                    Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                            Звонок.цСекунды * 1000L;

                    if ( ( Время >= цНачИнтерв ) && ( Время <= цКонИнтерв ) ) {

                        НачалоВинтервале = true;
                    }

                }

                if ( Звонок.Тип == Schedules.ТИП_КОНЕЦ ) {

                    ЕстьКонец = true;
                    Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                            Звонок.цСекунды * 1000L;

                    if ( ( Время >= цНачИнтерв ) && ( Время <= цКонИнтерв ) ) {

                        КонецВинтервале = true;
                    }

                }

            }

            if ( ( ЕстьНачало && ЕстьКонец ) && ( НачалоВинтервале || КонецВинтервале ) ) {

                МассивУроков.addElement( Урок );
            }

        }

        // Перебираем уроки и отображаем их на экране.
        Холст.setColor( 10, 80, 200 );
        long цНачало, цКонец;
        long x1, x2;

        for ( Enumeration e = МассивУроков.elements(); e.hasMoreElements(); ) {

            цНачало = цНачИнтерв;
            цКонец = цКонИнтерв;
            Урок = ( Schedules.LessonClass ) e.nextElement();

            for ( Enumeration e1 = Урок.Звонки.elements(); e1.hasMoreElements(); ) {

                Звонок = ( Schedules.BellClass ) e1.nextElement();

                if ( Звонок.Тип == Schedules.ТИП_НАЧАЛО ) {

                    Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                            Звонок.цСекунды * 1000L;

                    цНачало = ( Время < цНачИнтерв ) ? цНачИнтерв : Время ;
                }

                if ( Звонок.Тип == Schedules.ТИП_КОНЕЦ ) {

                    Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                            Звонок.цСекунды * 1000L;
                    цКонец = ( Время > цКонИнтерв ) ? цКонИнтерв : Время;

                }

            }

            цРасстМин = ( цНачало - цНачИнтерв ) / МИЛЛСЕК_В_МИН;
            x1 = ( ( ( ( ШиринаЭкрана - 2 * ОтступXY ) * 100 ) / ДлинаИнтервала ) * цРасстМин ) / 100;

            цРасстМин = ( цКонец - цНачИнтерв ) / МИЛЛСЕК_В_МИН;
            x2 = ( ( ( ( ШиринаЭкрана - 2 * ОтступXY ) * 100 ) / ДлинаИнтервала ) * цРасстМин ) / 100;

            Холст.fillRoundRect( ( int ) x1 + цСлева , цСверху + 1, ( int ) ( x2 - x1 ), цТолщинаПолосы - 1, 8, 8 );
        }

        Холст.setColor( 0, 0, 0 );

        boolean лОсталось = false;
        boolean лПрошло = false;

        // Относительный размер векторного шрифта.
        int k = 1;
        int ШиринаТекста;
        long x, цОсталось, цПрошло, врм;
        Font Шрифт;

        цОсталось = цКонИнтерв - Сейчас;
        цПрошло = Сейчас - цНачИнтерв;

        // Шаг 3. Отображаем уроки.
        for ( Enumeration e = врмЗвонки.elements(); e.hasMoreElements(); ) {

            Звонок = ( Schedules.BellClass ) e.nextElement();
            Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                    Звонок.цСекунды * 1000L;

//            цРасстМин = ( Время - цНачИнтерв ) / ( 60 * 1000L );
//            x = ( ( ( ШиринаЭкрана * 100 ) / цДлитИнтерв ) * цРасстМин ) / 100;
//            // Рисуем штрихи меток времени
//            Холст.fillRect( (int) x , цСверху - 2 + цТолщинаПолосы, 1, 5 );

            if ( Время >= Сейчас ) {

                лОсталось = true;
                врм = Время - Сейчас;

                if ( врм < цОсталось ) цОсталось = врм;

            } else {

                лПрошло = true;
                врм = Сейчас - Время;

                if ( врм < цПрошло ) цПрошло = врм;

            }

        }

        long цКолвоЧасов, цКолвоМинут, цКолвоСек;
        Шрифт = Font.getDefaultFont();
        Холст.setFont( Шрифт );

        if ( !врмЗвонки.isEmpty() ) {

            if ( лОсталось ) {

                // Отображаем сколько осталось и сколько прошло времени.
                цКолвоЧасов = цОсталось / МИЛЛСЕК_В_ЧАС;
                цКолвоМинут = ( цОсталось - цКолвоЧасов * МИЛЛСЕК_В_ЧАС ) / МИЛЛСЕК_В_МИН;
                цКолвоСек = ( цОсталось - цКолвоЧасов * МИЛЛСЕК_В_ЧАС - цКолвоМинут * МИЛЛСЕК_В_МИН ) / 1000L;

                Текст = ( ( цКолвоЧасов < 10) ? "0" : "" ) + цКолвоЧасов
                    + ":"
                    + ( ( цКолвоМинут < 10 ) ? "0" : "" ) + цКолвоМинут;

                ШиринаТекста = Шрифт.stringWidth( Текст );
                Холст.drawString( Текст,
                    ШиринаЭкрана - ШиринаТекста / 2 - 20 - ОтступXY,
                    цСверху - 20,
                    Graphics.TOP | Graphics.LEFT
                    );

//                PrintInkLineN( Холст, Текст,
//                    ШиринаЭкрана - ( l * ( FSizeX - 3  ) * k ) / 2 - 20 - ОтступXY,
//                    цСверху - 20,
//                    (int)( FSizeX * k ),
//                    (int)( FSizeY * k )
//                    );
            }

            if ( лПрошло ) {

                цКолвоЧасов = цПрошло / МИЛЛСЕК_В_ЧАС;
                цКолвоМинут = ( цПрошло - цКолвоЧасов * МИЛЛСЕК_В_ЧАС ) / МИЛЛСЕК_В_МИН;
                цКолвоСек = ( цОсталось - цКолвоЧасов * МИЛЛСЕК_В_ЧАС - цКолвоМинут * МИЛЛСЕК_В_МИН ) / 1000L;

                Текст = "-" + ( ( цКолвоЧасов < 10 ) ? "0" : "" ) + цКолвоЧасов
                    + ":"
                    + ( ( цКолвоМинут < 10 ) ? "0" : "" ) + цКолвоМинут;

                //l = Текст.length();
                ШиринаТекста = Шрифт.stringWidth( Текст );
                Холст.drawString( Текст,
                    ОтступXY,
                    цСверху - 20,
                    Graphics.TOP | Graphics.LEFT
                    );

//                PrintInkLineN( Холст, Текст,
//                    ОтступXY,
//                    цСверху - 20,
//                    (int)( FSizeX * k ),
//                    (int)( FSizeY * k )
//                    );
            }

        }

        // Отображаем отметки всех звонков.
        if ( !врмЗвонки.isEmpty() ) {

            Текст = "'";

            for ( Enumeration e = врмЗвонки.elements(); e.hasMoreElements(); ) {

                Звонок = ( Schedules.BellClass ) e.nextElement();
                Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                        Звонок.цСекунды * 1000L;
                цНачало = ( Время < цНачИнтерв ) ? цНачИнтерв : Время ;

                цРасстМин = ( цНачало - цНачИнтерв ) / МИЛЛСЕК_В_МИН;
                x1 = ( ( ( ( ШиринаЭкрана - 2 * ОтступXY ) * 100 ) / ДлинаИнтервала ) * цРасстМин ) / 100;

                ШиринаТекста = Шрифт.stringWidth( Текст );

                Холст.drawString( Текст,
                    ( int ) x1 + цСлева - ШиринаТекста / 2,
                    цСверху + цТолщинаПолосы - 5,
                    Graphics.TOP | Graphics.LEFT
                    );

                if ( ( Звонок.Тип == Schedules.ТИП_НАЧАЛО ) && Настройки.Звонки.логПредваритПередНачал ) {

                    Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                            Звонок.цСекунды * 1000L;
                    Время -= Настройки.Звонки.ВремяДоНачала * 60 * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;

                    цНачало = ( Время < цНачИнтерв ) ? цНачИнтерв : Время ;

                    цРасстМин = ( цНачало - цНачИнтерв ) / МИЛЛСЕК_В_МИН;
                    x1 = ( ( ( ( ШиринаЭкрана - 2 * ОтступXY ) * 100 ) / ДлинаИнтервала ) * цРасстМин ) / 100;

                    ШиринаТекста = Шрифт.stringWidth( Текст );

                    Холст.drawString( Текст,
                        ( int ) x1 + цСлева - ШиринаТекста / 2,
                        цСверху + цТолщинаПолосы - 5,
                        Graphics.TOP | Graphics.LEFT
                        );

                }

                if ( ( Звонок.Тип == Schedules.ТИП_КОНЕЦ ) && Настройки.Звонки.логПредваритПередОконч ) {

                    Время = Звонок.цЧасы * МИЛЛСЕК_В_ЧАС + Звонок.цМинуты * МИЛЛСЕК_В_МИН +
                            Звонок.цСекунды * 1000L;
                    Время -= Настройки.Звонки.ВремяДоОкончания * 60 * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;

                    цНачало = ( Время < цНачИнтерв ) ? цНачИнтерв : Время ;

                    цРасстМин = ( цНачало - цНачИнтерв ) / МИЛЛСЕК_В_МИН;
                    x1 = ( ( ( ( ШиринаЭкрана - 2 * ОтступXY ) * 100 ) / ДлинаИнтервала ) * цРасстМин ) / 100;

                    ШиринаТекста = Шрифт.stringWidth( Текст );

                    Холст.drawString( Текст,
                        ( int ) x1 + цСлева - ШиринаТекста / 2,
                        цСверху + цТолщинаПолосы - 5,
                        Graphics.TOP | Graphics.LEFT
                        );

                }

            }

        }

        // Отображаем отметки часов.
        for ( int ii = 0; ii < КолТочек; ii++ ) {

            Текст = "" + ( ( ( ( цМеткаЧас + ii ) % 24 ) < 10 ) ? "0" : "" ) +
                ( цМеткаЧас + ii ) % 24 + ":00";

            цРасстМин = ii * 60 + ( 60 - цНачМин );
            x = ( ( ( ШиринаЭкрана * 100 ) / ДлинаИнтервала ) * цРасстМин ) / 100;

            // Рисуем штрихи меток времени.
            Холст.fillRect( (int) x , цСверху - 2, 1, цТолщинаПолосы + 5 );

            //l = Текст.length();
            ШиринаТекста = Шрифт.stringWidth( Текст );

            Холст.drawString( Текст,
                (int) x - ШиринаТекста / 2,
                цСверху + цТолщинаПолосы,
                Graphics.TOP | Graphics.LEFT
                );
//            PrintInkLineN( Холст, Текст,
//                (int) x - ( l * ( FSizeX - 3 ) * k ) / 2,
//                цСверху + цТолщинаПолосы + 15,
//                (int)( FSizeX * k ),
//                (int)( FSizeY * k )
//                );

        }

        // Показываем метку текущего времени.
        x = ШиринаЭкрана / 2;
        Текст = ((цЧасы < 10) ? "0" : "") + цЧасы
            + ":"
            + ((цМинуты < 10) ? "0" : "") + цМинуты;

        //l = Текст.length();
        ШиринаТекста = Шрифт.stringWidth( Текст );
        Холст.drawString( Текст,
            (int) x - ШиринаТекста / 2,
            цСверху - 33,
            Graphics.TOP | Graphics.LEFT
            );
//        PrintInkLineN( Холст, Текст,
//            (int) x - ( l * ( FSizeX - 3  ) * k ) / 2,
//            цСверху - 30,
//            (int)( FSizeX * k ),
//            (int)( FSizeY * k )
//            );

        // Рисуем штрихи меток времени.
        Холст.setColor( 0, 166, 81 );
        Холст.fillRect( (int) x - 1 , цСверху - 3, 2, цТолщинаПолосы + 7 );
        Холст.fillArc( (int) x - 10, цСверху - 3 - 10, 20, 20, 60, 60 );

        // Эпилог.
        Холст.setColor( СтарыйЦвет );
    }


    public void ПоказатьДату( Graphics Холст, byte видШрифта, int Цвет ){

        int СтарыйЦвет = Холст.getColor();

        try {

            if ( !Настройки.Монитор.логПоказатьДату ) return;

            Calendar Календарь = Calendar.getInstance();
            //Календарь.setTime( new Date() );

            long Сейчас = System.currentTimeMillis();

            //long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
            //Поправка /= Scheduler.СЕК_В_СУТКИ * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
            long Поправка = Настройки.Основные.КолвоСуток;
            Поправка *= Настройки.Основные.СуточнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
            Поправка += МенеджерРасписаний.ДобавочнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;

            Календарь.setTime( new Date( Сейчас + Поправка ) );

            int ДеньНедели = Календарь.get( Calendar.DAY_OF_WEEK );
            int Год = Календарь.get( Calendar.YEAR );
            int Месяц = Календарь.get( Calendar.MONTH );
            int Число = Календарь.get( Calendar.DAY_OF_MONTH );

            String Дни[] = { "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" };
            String Месяцы[] = { "Янв", "Фев", "Мар", "Апр", "Май", "Июн",
                "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек" };

            String Текст = Дни[ ДеньНедели - 1 ];
            Текст += " " + Число;
            Текст += " " + Месяцы[ Месяц ];
            Текст += " " + Год;

            int Слева;
            int Сверху = ОтступXY - 2;

            switch ( видШрифта ) {

                case FontType.ОБЫЧНЫЙ:

                    Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, Цвет, Font.SIZE_MEDIUM, Слева, Сверху );
                    break;

                case FontType.ТОНКИЙ:
                case FontType.ЖИРНЫЙ:

                    int Масштаб = 2;
                    int ШиринаСимвола = ( FSizeX - 3 ) * Масштаб;

                    Слева = ( ШиринаЭкрана - 2 - ШиринаСимвола * Текст.length() ) / 2;

                    ПоказатьТекст( Холст, Текст, видШрифта, Цвет, Масштаб, Слева, Сверху );
                    break;

                case FontType.TRUETYPE:

                    int ШиринаТекста = Текст.length() * 11;

                    Слева = ( ШиринаЭкрана - 2 - ШиринаТекста ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.TRUETYPE, Цвет, 0, Слева, Сверху );
                    break;

            }

        } catch ( Exception Исключение ) {

            String Текст = "Ошибка: " + Исключение.getMessage();

            int Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;
            int Сверху = 2 * ОтступXY;

            ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, 0xFFFF0000, Font.SIZE_SMALL, Слева, Сверху );
        }

        Холст.setFont( Font.getDefaultFont() );
        Холст.setColor( СтарыйЦвет );

    }


    public void ПоказатьВремя( Graphics Холст, byte видШрифта, int Цвет ){

        int СтарыйЦвет = Холст.getColor();

        try {

            if ( !Настройки.Монитор.логПоказатьВремя ) return;

            Calendar Календарь = Calendar.getInstance();
            long Сейчас = System.currentTimeMillis();

    //        long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
    //        Поправка /= Scheduler.СЕК_В_СУТКИ * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
            long Поправка = Настройки.Основные.КолвоСуток;
            Поправка *= Настройки.Основные.СуточнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
            Поправка += МенеджерРасписаний.ДобавочнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;

            Календарь.setTime( new Date( Сейчас + Поправка ) );

            int Минуты = Календарь.get( Calendar.MINUTE );
            int Часы = Календарь.get( Calendar.HOUR_OF_DAY );
            int Секунды = Календарь.get( Calendar.SECOND );

            String Текст = ((Часы < 10) ? "0" : "") + Часы;
            Текст += ":" + ((Минуты < 10) ? "0" : "") + Минуты;
            Текст += ":" + ((Секунды < 10) ? "0" : "") + Секунды;

            int Слева = 0, Сверху = 0;

            switch ( видШрифта ) {

                case FontType.ОБЫЧНЫЙ:

                    ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, Цвет, Font.SIZE_MEDIUM, Слева, Сверху );
                    break;

                case FontType.ТОНКИЙ:
                case FontType.ЖИРНЫЙ:

                    int Масштаб = 2;

                    ПоказатьТекст( Холст, Текст, видШрифта, Цвет, Масштаб, Слева, Сверху );
                    break;

                case FontType.TRUETYPE:

                    ПоказатьТекст( Холст, Текст, FontType.TRUETYPE, Цвет, 0, Слева, Сверху );
                    break;

            }

        } catch ( Exception Исключение ) {

            String Текст = "Ошибка: " + Исключение.getMessage();

            ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, 0xFFFF0000, Font.SIZE_SMALL, 0, 0 );
        }

        Холст.setFont( Font.getDefaultFont() );
        Холст.setColor( СтарыйЦвет );

    }


    public void ПоказатьПлан( Graphics Холст, byte видШрифта, int Цвет ) {

        if ( !Настройки.Монитор.логПоказатьПлан ) return;

        if ( Настройки.Расписания.Режим != Settings.РЕЖИМ_ГОДОВОЙ_ПЛАН ) return;

        int СтарыйЦвет = Холст.getColor();

        // Эту строку нельзя поместить в блок try {}.
        Schedules.ОбразПлана План;

        try {

            План = ( Schedules.ОбразПлана ) МенеджерРасписаний.СписокПланов.Элементы.elementAt( Настройки.Расписания.ТекущийПлан );

            String Текст = План.Название;

            int Слева;
            int Сверху = Настройки.Монитор.ПланОтступСверху;

            switch ( видШрифта ) {

                case FontType.ОБЫЧНЫЙ:

                    Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, Цвет, Font.SIZE_MEDIUM, Слева, Сверху );
                    break;

                case FontType.ТОНКИЙ:
                case FontType.ЖИРНЫЙ:

                    int Масштаб = 2;
                    int ШиринаСимвола = ( FSizeX - 3 ) * Масштаб;

                    Слева = ( ШиринаЭкрана - 2 - ШиринаСимвола * Текст.length() ) / 2;

                    ПоказатьТекст( Холст, Текст, видШрифта, Цвет, Масштаб, Слева, Сверху );
                    break;

                case FontType.TRUETYPE:

                    int ШиринаТекста = Текст.length() * 11;

                    Слева = ( ШиринаЭкрана - 2 - ШиринаТекста ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.TRUETYPE, Цвет, 0, Слева, Сверху );
                    break;

            }

        } catch ( Exception Исключение ) {

            String Текст = "Ошибка: " + Исключение.getMessage();

            int Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;
            int Сверху = Настройки.Монитор.ПланОтступСверху;

            ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, 0xFFFF0000, Font.SIZE_SMALL, Слева, Сверху );
        }

        Холст.setFont( Font.getDefaultFont() );
        Холст.setColor( СтарыйЦвет );

    }


    public void ПоказатьРасписание( Graphics Холст, byte видШрифта, int Цвет ) {

        if ( !Настройки.Монитор.логПоказатьРежим ) return;

        int СтарыйЦвет = Холст.getColor();

        // Эту строку нельзя поместить в блок try {}.
        Schedules.ScheduleClass Расписание;

        try {

            Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt( Настройки.Расписания.ТекущееРасписание );

            String Текст = ( Настройки.Расписания.Режим == Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ ) ?
                "< " + Расписание.Название + " >" : Расписание.Название;

            int Слева;
            int Сверху = Настройки.Монитор.РежимОтступСверху;

            switch ( видШрифта ) {

                case FontType.ОБЫЧНЫЙ:

                    Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, Цвет, Font.SIZE_MEDIUM, Слева, Сверху );
                    break;

                case FontType.ТОНКИЙ:
                case FontType.ЖИРНЫЙ:

                    int Масштаб = 2;
                    int ШиринаСимвола = ( FSizeX - 3 ) * Масштаб;

                    Слева = ( ШиринаЭкрана - 2 - ШиринаСимвола * Текст.length() ) / 2;

                    ПоказатьТекст( Холст, Текст, видШрифта, Цвет, Масштаб, Слева, Сверху );
                    break;

                case FontType.TRUETYPE:

                    int ШиринаТекста = Текст.length() * 11;

                    Слева = ( ШиринаЭкрана - 2 - ШиринаТекста ) / 2;

                    ПоказатьТекст( Холст, Текст, FontType.TRUETYPE, Цвет, 0, Слева, Сверху );
                    break;

            }

        } catch ( Exception Исключение ) {

            String Текст = "Ошибка: " + Исключение.getMessage();

            int Слева = ( ШиринаЭкрана - 2 - Холст.getFont().stringWidth( Текст ) ) / 2;
            int Сверху = Настройки.Монитор.ПланОтступСверху;

            ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, 0xFFFF0000, Font.SIZE_SMALL, Слева, Сверху );
        }

        Холст.setFont( Font.getDefaultFont() );
        Холст.setColor( СтарыйЦвет );

    }


    public void ПоказатьВременнуюПоправку( Graphics Холст, int Цвет ) {

        try {

            long Поправка = Настройки.Основные.КолвоСуток;
            Поправка *= Настройки.Основные.СуточнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;
            Поправка += МенеджерРасписаний.ДобавочнаяПоправка * Scheduler.МИЛЛСЕК_В_СЕКУНДЕ;

            String Текст = "Поправка("
                    + Настройки.Основные.СуточнаяПоправка
                    + ", "
                    + МенеджерРасписаний.ДобавочнаяПоправка
                    + "): "
                    + ПродолжительностьВТекст( Поправка );

            int Масштаб = 1;
            int ШиринаСимвола = ( FSizeX - 1 ) * Масштаб;

            int Слева = ( ШиринаЭкрана - 2 - ШиринаСимвола * Текст.length() ) / 2;
            int Сверху = ВысотаЭкрана - ОтступXY - 4 * Масштаб * FSizeY;

            ПоказатьТекст( Холст, Текст, FontType.ТОНКИЙ, Цвет, Масштаб, Слева, Сверху );

        } catch ( Exception Исключение ) {

            String Текст = "Ошибка: " + Исключение.getMessage();

            int Сверху = Настройки.Монитор.ВысотаЭкрана - Настройки.Монитор.ОтступXY;

            Сверху -= Холст.getFont().getHeight();

            ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, 0xFFFF0000, 0, 0, Сверху );
        }

    }


    public void ПоказатьКопирайт( Graphics Холст, int Цвет ) {

        try {

            String Текст = "(c)Мезенцев В.Н., вер. " + Мидлет.getAppProperty( "MIDlet-Version" );

            int Масштаб = 1;
            int ШиринаСимвола = ( FSizeX - 1 ) * Масштаб;

            int Слева = ( ШиринаЭкрана - 2 - ШиринаСимвола * Текст.length() ) / 2;
            int Сверху = ВысотаЭкрана - ОтступXY - 2 * Масштаб * FSizeY;

            ПоказатьТекст( Холст, Текст, FontType.ТОНКИЙ, Цвет, Масштаб, Слева, Сверху );

        } catch ( Exception Исключение ) {

            String Текст = "Ошибка: " + Исключение.getMessage();

            int Сверху = Настройки.Монитор.ВысотаЭкрана - Настройки.Монитор.ОтступXY;

            Сверху -= Холст.getFont().getHeight();

            ПоказатьТекст( Холст, Текст, FontType.ОБЫЧНЫЙ, 0xFFFF0000, Font.SIZE_SMALL, 0, Сверху );
        }

    }


    public void ПоказатьТекст( Graphics Холст, String Текст, byte видШрифта, int Цвет, int Масштаб, int Слева, int Сверху ){

        int СтарыйЦвет = Холст.getColor();

        try {

            Холст.setColor( Цвет );

            switch ( видШрифта ) {

                case FontType.ОБЫЧНЫЙ:

                    Font Шрифт = Font.getFont( Font.FACE_MONOSPACE, Font.STYLE_PLAIN, Масштаб );

                    Холст.setFont( Шрифт );
                    Холст.drawString( Текст, Слева, Сверху, Graphics.TOP | Graphics.LEFT );

                    break;

                case FontType.ТОНКИЙ:

                    PrintInkLineN( Холст, Текст, Слева, Сверху, FSizeX * Масштаб, FSizeY * Масштаб );

                    break;

                case FontType.ЖИРНЫЙ:

                    PrintInkLineB( Холст, Текст, Слева, Сверху, FSizeX * Масштаб, FSizeY * Масштаб );

                    break;

                case FontType.TRUETYPE:

                    FontClass font = new FontClass( "Tahoma14" );
                    font.УстановитьЦвет( Цвет );

                    font.ОтобразитьСтроку( Холст, Текст, Слева, Сверху );

                    break;

            }

        } catch ( Exception Исключение ) {}

        Холст.setFont( Font.getDefaultFont() );
        Холст.setColor( СтарыйЦвет );

    }


    public void ПоказатьСетку( Graphics Холст ) {

        if ( !Настройки.Монитор.логПоказатьСетку ) return;

        int СтарыйЦвет = Холст.getColor();

        int nh = ВысотаЭкрана / ШагСеткиXY;
        int nw = ШиринаЭкрана / ШагСеткиXY;

        Холст.setColor( ЦВЕТ_СЕРЫЙ );

        Холст.setStrokeStyle( Graphics.DOTTED );

        for ( int i = 0; i <= nh; i++ ) {

            Холст.drawLine( ОтступXY, i * ШагСеткиXY, ШиринаЭкрана - ОтступXY - 2, i * ШагСеткиXY );
        }

        for ( int i = 0; i <= nw; i++ ) {

            Холст.drawLine( i * ШагСеткиXY, ОтступXY, i * ШагСеткиXY, ВысотаЭкрана - ОтступXY - 2 );
        }

        Холст.setStrokeStyle( Graphics.SOLID );
        Холст.setColor( СтарыйЦвет );

    }


    public void ПоказатьРамку( Graphics Холст ){

        if ( !Настройки.Монитор.логПоказатьРамку ) return;

        int СтарыйЦвет = Холст.getColor();

        Холст.setColor( ЦВЕТ_ГОЛУБОЙ );

        Холст.drawRoundRect( ОтступXY, ОтступXY,
            ШиринаЭкрана - ОтступXY - 2,
            ВысотаЭкрана - ОтступXY - 2,
            ШагСеткиXY,
            ШагСеткиXY
            );

        Холст.setColor( СтарыйЦвет );

    }


    public String ПродолжительностьВТекст( long Интервал ) {

        String Текст;

        int Дни = ( int ) ( Интервал / MonitorForm.МИЛЛСЕК_В_ДЕНЬ );

        Интервал -= Дни * MonitorForm.МИЛЛСЕК_В_ДЕНЬ;
        int Часы = ( int ) ( Интервал / MonitorForm.МИЛЛСЕК_В_ЧАС );

        Интервал -= Часы * MonitorForm.МИЛЛСЕК_В_ЧАС;
        int Минуты = ( int ) ( Интервал / MonitorForm.МИЛЛСЕК_В_МИН );

        Интервал -= Минуты * MonitorForm.МИЛЛСЕК_В_МИН;
        int Секунды = ( int ) ( Интервал / Scheduler.МИЛЛСЕК_В_СЕКУНДЕ );

        Текст = "";

        if ( Дни > 0 ) Текст += Дни + " сут ";
        if ( Часы > 0 ) Текст += ( ( Часы < 10 ) ? "0" : "" ) + Часы + " ч ";
        if ( Минуты > 0 ) Текст += ( ( Минуты < 10 ) ? "0" : "" ) + Минуты + " м ";

        Текст += ( ( Секунды < 10 ) ? "0" : "" ) + Секунды + " с";

        return Текст;

    }


    public void ОчиститьХолст( Graphics Холст, int цвет ){

        Холст.setColor( цвет );
        Холст.fillRect( 0, 0, getWidth(), getHeight() );

    }

    // </editor-fold>

    // <editor-fold desc=" Обработчики событий ">

    public void paint( Graphics Холст ) {

        Graphics СохрХолст = Холст;

        if ( ЭкранБуфер != null ) {

            Холст = ЭкранБуфер.getGraphics();
        }

        if ( СчётчикСекунд == 0 ) {

            ОчиститьХолст( Холст, -1 );

            ПоказатьСетку( Холст );
            ПоказатьРамку( Холст );

            ПоказатьДату( Холст, FontType.TRUETYPE, ЦВЕТ_ГОЛУБОЙ );
            ПоказатьПлан( Холст, FontType.TRUETYPE, ЦВЕТ_ГОЛУБОЙ );
            ПоказатьРасписание( Холст, FontType.TRUETYPE, ЦВЕТ_ГОЛУБОЙ );

            ПоказатьДиаграмму( Холст,
                ШиринаЭкрана, ОтступXY,
                Настройки.Монитор.ДиаграммаОтступСверху,
                Настройки.Монитор.ДиаграммаТолщинаПолосы,
                Настройки.Монитор.ДиаграммаДлинаИнтервала
                );

            ПоказатьЛегенду( Холст, FontType.ОБЫЧНЫЙ, ЦВЕТ_ГОЛУБОЙ );
            ПоказатьВременнуюПоправку( Холст, ЦВЕТ_ЧЁРНЫЙ );
            ПоказатьКопирайт( Холст, ЦВЕТ_ЧЁРНЫЙ );

        }

        ОчиститьХолст( ВремяБуфер.getGraphics(), -1 );
        ПоказатьВремя( ВремяБуфер.getGraphics(), FontType.TRUETYPE, ЦВЕТ_ГОЛУБОЙ );

        Холст.drawImage( ВремяБуфер, ( ШиринаЭкрана - 95 ) / 2,
                Настройки.Монитор.ВремяОтступСверху,
                Graphics.LEFT | Graphics.TOP );

        if ( Холст != СохрХолст ) {

            СохрХолст.drawImage( ЭкранБуфер, 0, 0, Graphics.LEFT | Graphics.TOP );
        }

        СчётчикСекунд++;
        СчётчикСекунд %= 20;

    }

    protected void keyPressed( int КодКнопки ) {

        // Останавливаем обновление экрана.
//        if ( Таймер != null ) {
//
//            Таймер.cancel();
//            Таймер = null;
//        }

        int Кнопка  = getGameAction( КодКнопки );

        main.Логгер.info( "[MonitorForm.java]: Клавиша " + "["
                + ( ( КодКнопки > 0 ) ? "'" + ( char ) КодКнопки + "'" : "" + КодКнопки )
                + "]: "
                + КодВСимвол( Кнопка ) );

        if ( КодКнопки == КНОПКА_ЗВЁЗДОЧКА ) {

            switch ( Настройки.Расписания.Режим ) {

                case Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ:
                    Настройки.Расписания.Режим = Settings.РЕЖИМ_ГОДОВОЙ_ПЛАН;
                    break;

                case Settings.РЕЖИМ_ГОДОВОЙ_ПЛАН:
                    Настройки.Расписания.Режим = Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ;
                    break;

            }

            Планировщик.Запуск();


        } else if ( Кнопка == КНОПКА_ВПРАВО ) {

            if ( Настройки.Расписания.Режим == Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ ) {

                if ( Настройки.Расписания.ТекущееРасписание == МенеджерРасписаний.Расписания.size() - 1 ) {

                    Настройки.Расписания.ТекущееРасписание = 0;

                } else {

                    Настройки.Расписания.ТекущееРасписание++;
                }

                Планировщик.Запуск();
            }


        } else if ( Кнопка == КНОПКА_ВЛЕВО ) {

            if ( Настройки.Расписания.Режим == Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ ) {

                if ( Настройки.Расписания.ТекущееРасписание == 0 ) {

                    Настройки.Расписания.ТекущееРасписание = МенеджерРасписаний.Расписания.size() - 1;

                } else {

                    Настройки.Расписания.ТекущееРасписание--;
                }

                Планировщик.Запуск();
            }


        // Делаем снимок экрана.
//        } else if ( КодКнопки == Canvas.KEY_NUM0 ) {
//
//            try {
//
//                ЭкранБуфер = Image.createImage( ШиринаЭкрана, ВысотаЭкрана );
//
//                СчётчикСекунд = 0;
//
//                paint( ЭкранБуфер.getGraphics() );
//
//                СохранитьСнимок( ЭкранБуфер );
//
//                ЭкранБуфер = null;
//
//            } catch ( Exception ex ) {
//
//                main.Логгер.error( "[MonitorForm.java]: " + ex.toString() );
//            }

        }

//        Таймер = new Timer();
//
//        Таймер.schedule(
//                new TimerTask() { public void run() { repaint(); } },
//                1000, 1000 );

        СчётчикСекунд = 0;

    }

    public void commandAction( Command команда, Displayable элемент ) {

        // Переход в Главное меню
        if ( команда == КомандаНазад ) {

            main.Логгер.info( "[MonitorForm.java]: <Назад>" );

            Планировщик.Останов();

            Таймер.cancel();
            Таймер = null;

            Дисплей.setCurrent( РодительскоеОкно );

        }

    }

    // </editor-fold>

}
