
// <editor-fold desc=" Подключаемые модули ">

import java.util.*;

import javax.microedition.midlet.*;
import javax.microedition.lcdui.*;
import javax.microedition.media.*;
import javax.microedition.media.control.*;

import net.sf.microlog.midp.file.FileAppender;

// </editor-fold>

public class Scheduler {

    // <editor-fold desc=" class VolumeControlTask ">

    class VolumeControlTask extends TimerTask {

        long Старт;
        int УстанГромкость;
        long ДлитПерехода;
        long Интервал;

        VolumeControlTask( long Старт, int УстанГромкость, long ДлитПерехода, long Интервал  ) {

            this.Старт = Старт;
            this.УстанГромкость = УстанГромкость;
            this.ДлитПерехода = ДлитПерехода;
            this.Интервал = Интервал;

        }

        int Уровень( long время ) {

            if ( время > ( Интервал + 2 * ДлитПерехода ) ) {

                Звонит = false;

                try { main.ОбновитьПлеер( main.Плеер ); } catch( MediaException МедиаИсключение ) {}

                if ( ТаймерГромкости != null ) ТаймерГромкости.cancel();

                return 0;

            }

            if ( время <= ДлитПерехода ) {

                Звонит = true;
                return ( int ) ( ( УстанГромкость * время ) / ДлитПерехода  );

            }

            if ( ( время > ДлитПерехода ) && ( время <= ( Интервал + ДлитПерехода ) ) )
                return УстанГромкость;

            if ( ( время > ( Интервал + ДлитПерехода ) ) && ( время <= ( Интервал + 2 * ДлитПерехода ) ) )
                return ( int ) ( ( УстанГромкость * ( Интервал + 2 * ДлитПерехода - время ) ) / ДлитПерехода );

            return 0;
        }

        public void run() {

            if ( main.Плеер != null ) {

                VolumeControl Громкость = ( VolumeControl ) main.Плеер.getControl( "VolumeControl" );

                if ( Громкость != null ) Громкость.setLevel( Уровень( System.currentTimeMillis() - Старт  )  );

            }

        }

    }

    // </editor-fold>

    // <editor-fold desc=" class Action ">

    class Action extends TimerTask {

        Schedule Задание;

        Action( Schedule Задание ) {

            this.Задание = Задание;
        }

        public void run() {

            Calendar Календарь;

            if ( Настройки.Расписания.Режим == Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ ) {

                if ( Задание.Тип == Schedules.ТИП_СМЕНА_РАСПИСАНИЯ ) {

                    // Обновляем файл лога, если его размер превышен.
                    if ( main.Логгер.getNumberOfAppenders() >= 2 ) {

                        FileAppender НаполнительФайла = ( FileAppender ) main.Логгер.getAppender(1);

                        if ( НаполнительФайла.getLogSize() > ( Настройки.Основные.РазмерФайлаЛога * 1024 ) )
                            НаполнительФайла.clear();

                    }

                    if ( МенеджерРасписаний.Расписания.isEmpty() ) {

                        main.Логгер.info( "[Scheduler.java]: Список расписаний пустой." );
                        return;
                    }

                    // Отсчёт суток для корректировки продолжительности работы.
                    if ( МенеджерРасписаний.ПервыеСутки != true ) {

                        Настройки.Основные.КолвоСуток++;
                    }

                    Календарь = Calendar.getInstance();
                    long Сейчас = System.currentTimeMillis();
                    int Часы, Минуты, Секунды, месяц, число, ДеньНедели, год;

                    long Поправка = Настройки.Основные.КолвоСуток;
                    Поправка *= Настройки.Основные.СуточнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
                    Поправка += МенеджерРасписаний.ДобавочнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;

                    Календарь.setTime( new Date( Сейчас + Поправка ) );

                    Минуты = Календарь.get( Calendar.MINUTE );
                    Часы = Календарь.get( Calendar.HOUR_OF_DAY );
                    Секунды = Календарь.get( Calendar.SECOND );

                    // ---- Время на Мониторе ----
                    main.Логгер.info( "[Scheduler.java]: ---------------------------" );
                    main.Логгер.info( "[Scheduler.java]: Режим: Суточное расписание." );
                    main.Логгер.info( "[Scheduler.java]: Время на мониторе: "
                            + ( Часы < 10 ? "0" + Часы : "" + Часы )
                            + ":"
                            + ( Минуты < 10 ? "0" + Минуты : "" + Минуты )
                            + ":"
                            + ( Секунды < 10 ? "0" + Секунды : "" + Секунды )
                            );

                    // ---- Время с поправкой ----
                    Календарь.setTime( new Date( Задание.ВремяСтарта ) );

                    // Заполняем поля календаря временем звонка.
                    String Неделя[] = { "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" };
                    ДеньНедели = Календарь.get( Calendar.DAY_OF_WEEK );
                    Часы = Календарь.get( Calendar.HOUR_OF_DAY );
                    Минуты = Календарь.get( Calendar.MINUTE );
                    Секунды = Календарь.get( Calendar.SECOND );
                    год = Календарь.get( Calendar.YEAR );
                    месяц = Календарь.get( Calendar.MONTH ) + 1;
                    число = Календарь.get( Calendar.DAY_OF_MONTH );

                    Schedules.ScheduleClass Расписание;
                    Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt( Настройки.Расписания.ТекущееРасписание );

                    main.Логгер.info( "[Scheduler.java]: Старт таймера: "
                            + Неделя[ ДеньНедели - 1 ]
                            + " "
                            + ( число < 10 ? "0" + число : "" + число )
                            + "."
                            + ( месяц < 10 ? "0" + месяц : "" + месяц )
                            + "."
                            + год
                            + " г., "
                            + ( Часы < 10 ? "0" + Часы : "" + Часы )
                            + ":"
                            + ( Минуты < 10 ? "0" + Минуты : "" + Минуты )
                            + ":"
                            + ( Секунды < 10 ? "0" + Секунды : "" + Секунды )
                            + ", расписание: "
                            + Расписание.Название
                            );

                    // Обновляем время начала работы.
                    if ( МенеджерРасписаний.ПервыеСутки == true ) {

                        МенеджерРасписаний.ПервыеСутки = false;

                        Сейчас = System.currentTimeMillis();

                        МенеджерРасписаний.ДобавочнаяПоправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
                        МенеджерРасписаний.ДобавочнаяПоправка *= 100;
                        МенеджерРасписаний.ДобавочнаяПоправка /= СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;
                        МенеджерРасписаний.ДобавочнаяПоправка *= Настройки.Основные.СуточнаяПоправка;
                        МенеджерРасписаний.ДобавочнаяПоправка /= 100;

                        МенеджерРасписаний.НачалоРаботы = Сейчас - 60 * МИЛЛСЕК_В_СЕКУНДЕ;

                        // Записываем добавочную поправку.
                        main.Логгер.info( "[Scheduler.java]: Добавочная поправка: "
                                + МенеджерРасписаний.ДобавочнаяПоправка + " сек" );
                    }

                    Запуск();
                    return;
                }

            }

            if ( Настройки.Расписания.Режим == Settings.РЕЖИМ_ГОДОВОЙ_ПЛАН ) {

                if ( Задание.Тип == Schedules.ТИП_СМЕНА_РАСПИСАНИЯ ) {

                    // Если планов нет, то ничего не делаем.
                    if ( МенеджерРасписаний.СписокПланов.Элементы.isEmpty() ) {

                        main.Логгер.info( "[Scheduler.java]: Список планов пустой." );
                        return;
                    }

                    // Обновляем файл лога, если его размер превышен.
                    if ( main.Логгер.getNumberOfAppenders() >= 2 ) {

                        FileAppender НаполнительФайла = ( FileAppender ) main.Логгер.getAppender(1);

                        if ( НаполнительФайла.getLogSize() > ( Настройки.Основные.РазмерФайлаЛога * 1024 ) )
                            НаполнительФайла.clear();
                    }

                    // Отсчёт суток для корректировки продолжительности работы.
                    if ( МенеджерРасписаний.ПервыеСутки != true ) {

                        Настройки.Основные.КолвоСуток++;
                    }

                    Календарь = Calendar.getInstance();
                    long Сейчас = System.currentTimeMillis();

                    long Поправка = Настройки.Основные.КолвоСуток;
                    Поправка *= Настройки.Основные.СуточнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
                    Поправка += МенеджерРасписаний.ДобавочнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;

                    // Узнаём текущее расписание по плану.
                    int N, месяц, число;
                    Schedules.ScheduleClass Расписание;
                    Schedules.ОбразПлана План;

                    Календарь.setTime( new Date( Сейчас + Поправка ) );

                    int год = Календарь.get( Calendar.YEAR );
                    месяц = Календарь.get( Calendar.MONTH );
                    число = Календарь.get( Calendar.DAY_OF_MONTH ) - 1;
                    int Минуты = Календарь.get( Calendar.MINUTE );
                    int Часы = Календарь.get( Calendar.HOUR_OF_DAY );
                    int Секунды = Календарь.get( Calendar.SECOND );

                    План = ( Schedules.ОбразПлана ) МенеджерРасписаний.СписокПланов.Элементы.elementAt( Настройки.Расписания.ТекущийПлан );
                    N = План.Основной[ месяц ][ число ].intValue();

                    Record Запись = ( Record ) МенеджерРасписаний.Данные.Записи.elementAt( N );

                    // ---- Время на Мониторе ----
                    main.Логгер.info( "[Scheduler.java]: ---------------------------" );
                    main.Логгер.info( "[Scheduler.java]: Режим: Годовой план." );
                    main.Логгер.info( "[Scheduler.java]: Время на мониторе: "
                            + ( Часы < 10 ? "0" + Часы : "" + Часы )
                            + ":"
                            + ( Минуты < 10 ? "0" + Минуты : "" + Минуты )
                            + ":"
                            + ( Секунды < 10 ? "0" + Секунды : "" + Секунды )
                            );

                    // ---- Время с поправкой ----
                    Календарь.setTime( new Date( Задание.ВремяСтарта ) );

                    // Заполняем поля календаря временем звонка.
                    String Неделя[] = { "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" };
                    int ДеньНедели = Календарь.get( Calendar.DAY_OF_WEEK );
                    Часы = Календарь.get( Calendar.HOUR_OF_DAY );
                    Минуты = Календарь.get( Calendar.MINUTE );
                    Секунды = Календарь.get( Calendar.SECOND );
                    месяц = Календарь.get( Calendar.MONTH ) + 1;
                    число = Календарь.get( Calendar.DAY_OF_MONTH );

                    main.Логгер.info( "[Scheduler.java]: Старт таймера: "
                            + Неделя[ ДеньНедели - 1 ]
                            + " "
                            + ( число < 10 ? "0" + число : "" + число )
                            + "."
                            + ( месяц < 10 ? "0" + месяц : "" + месяц )
                            + "."
                            + год
                            + " г., "
                            + ( Часы < 10 ? "0" + Часы : "" + Часы )
                            + ":"
                            + ( Минуты < 10 ? "0" + Минуты : "" + Минуты )
                            + ":"
                            + ( Секунды < 10 ? "0" + Секунды : "" + Секунды )
                            + ", план: "
                            + План.Название
                            + ", расписание: "
                            + Запись.Имя
                            );

                    // Обновляем время начала работы.
                    if ( МенеджерРасписаний.ПервыеСутки == true ) {

                        МенеджерРасписаний.ПервыеСутки = false;

                        Сейчас = System.currentTimeMillis();

                        МенеджерРасписаний.ДобавочнаяПоправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
                        МенеджерРасписаний.ДобавочнаяПоправка *= 100;
                        МенеджерРасписаний.ДобавочнаяПоправка /= СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;
                        МенеджерРасписаний.ДобавочнаяПоправка *= Настройки.Основные.СуточнаяПоправка;
                        МенеджерРасписаний.ДобавочнаяПоправка /= 100;

                        МенеджерРасписаний.НачалоРаботы = Сейчас - 60 * МИЛЛСЕК_В_СЕКУНДЕ;

                        // Записываем добавочную поправку
                        main.Логгер.info( "[Scheduler.java]: Добавочная поправка: "
                                + МенеджерРасписаний.ДобавочнаяПоправка + " сек" );
                    }

                    for ( int ii = 0; ii < МенеджерРасписаний.Расписания.size(); ii++ ) {

                        Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt(ii);

                        if ( Запись.Имя.equals( Расписание.Название ) ) {

                            Настройки.Расписания.ТекущееРасписание = ii;
                            Запуск();
                            return;
                        }

                    }

                    // Если расписания не нашлось, то восстанавливаем старое расписание.
                    Запуск();
                    return;
                }

            }

            ЗапускЗадания( Задание );

            // Регулировка громкости.
            if ( ТаймерГромкости != null ) ТаймерГромкости.cancel();

            ТаймерГромкости = new Timer();
            ТаймерГромкости.schedule(
                    new VolumeControlTask( System.currentTimeMillis(),
                        Настройки.Основные.Громкость, 5000, Задание.Длительность * МИЛЛСЕК_В_СЕКУНДЕ ),
                    0,
                    1000
                    );
        }

    }

    // </editor-fold>

    // <editor-fold desc=" class AlarmThread ">

    class AlarmThread extends Thread implements PlayerListener {

        Schedule Задание;

        AlarmThread( Schedule Задание ) {

            this.Задание = Задание;
        }

        public void run() {

            Calendar Календарь;

            // ---- Время на Мониторе ----
            Календарь = Calendar.getInstance();
            long Сейчас = System.currentTimeMillis();

//            long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
//            Поправка /= СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;
            long Поправка = Настройки.Основные.КолвоСуток;
            Поправка *= Настройки.Основные.СуточнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
            Поправка += МенеджерРасписаний.ДобавочнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;

            Календарь.setTime( new Date( Сейчас + Поправка ) );

            int Минуты = Календарь.get( Calendar.MINUTE );
            int Часы = Календарь.get( Calendar.HOUR_OF_DAY );
            int Секунды = Календарь.get( Calendar.SECOND );

            main.Логгер.info( "[Scheduler.java]: Время на мониторе: "
                    + ( Часы < 10 ? "0" + Часы : "" + Часы )
                    + ":"
                    + ( Минуты < 10 ? "0" + Минуты : "" + Минуты )
                    + ":"
                    + ( Секунды < 10 ? "0" + Секунды : "" + Секунды )
                    );

            Календарь.setTime( new Date( Задание.ВремяСтарта ) );

            // Заполняем поля календаря временем звонка.
            Часы = Календарь.get( Calendar.HOUR_OF_DAY );
            Минуты = Календарь.get( Calendar.MINUTE );
            Секунды = Календарь.get( Calendar.SECOND );

            main.Логгер.info( "[Scheduler.java]: Старт таймера: "
                    + ( Часы < 10 ? "0" + Часы : "" + Часы )
                    + ":"
                    + ( Минуты < 10 ? "0" + Минуты : "" + Минуты )
                    + ":"
                    + ( Секунды < 10 ? "0" + Секунды : "" + Секунды )
                    + ", \""
                    + Задание.Путь
                    + "\""
                    );

            main.ПроигратьФайл( this, Задание.Путь, 0 );

        }

        public void playerUpdate( Player Плеер, String Событие, Object Данные ) {

        if ( ( Событие == END_OF_MEDIA ) || ( Событие == ERROR )
            || ( Событие == CLOSED ) || ( Событие == STOPPED ) ) {

                try { main.ОбновитьПлеер( Плеер ); } catch( MediaException mex ) { }

                if ( ТаймерГромкости != null ) ТаймерГромкости.cancel();

            }

        }

    }

    // </editor-fold>

    // <editor-fold desc=" Поля класса ">

    static final public long СЕК_В_СУТКИ = 24*60*60;
    static final public long МИЛЛСЕК_В_СЕКУНДЕ = 1000L;

    long start;

    // Для индикатора звонка на Мониторе.
    public boolean Звонит = false;

    Vector activeTimers;
    Vector Задания;

    Display Дисплей;
    private Schedules МенеджерРасписаний;
    private Settings Настройки;

    private Timer ТаймерГромкости;

    // </editor-fold>

    // <editor-fold desc=" Конструктор ">

    public Scheduler( MIDlet Мидлет, Schedules Менеджер, Settings Настройки ) {

        МенеджерРасписаний = Менеджер;
        Задания = new Vector();
        Дисплей = Display.getDisplay( Мидлет );
        this.Настройки = Настройки;

        try { main.ОбновитьПлеер( main.Плеер ); } catch( MediaException МедиаИсключение ) {}

        main.Логгер.info( "[Scheduler.java]: Scheduler()" );
    }

    // </editor-fold>

    // <editor-fold desc=" Методы класса ">

    void ЗапускЗадания( Schedule Задание ) {

        ( new AlarmThread( Задание ) ).start();
    }


    void УстановитьТаймер( Schedule Задание ) {

        Задание.Таймер = new Timer();

        Задание.Таймер.scheduleAtFixedRate( new Action( Задание ),
                new Date( Задание.ВремяСтарта ), 31 * СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ );

    }


    public void Запуск() {

        // Узнаём текущее расписание по плану.
        int N, месяц, число;
        Schedules.ScheduleClass Расписание;
        Schedules.ОбразПлана План;
        Calendar Календарь;

        Календарь = Calendar.getInstance();
        long Сейчас = System.currentTimeMillis();

        // Останавливаем и удаляем все таймеры.
        Останов();

        main.Логгер.info( "[Scheduler.java]: Запуск таймеров. Начало" );

        if ( Настройки.Расписания.Режим == Settings.РЕЖИМ_ГОДОВОЙ_ПЛАН ) {

//            long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
//            Поправка /= СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;
            long Поправка = Настройки.Основные.КолвоСуток;
            Поправка *= Настройки.Основные.СуточнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
            Поправка += МенеджерРасписаний.ДобавочнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;

            Календарь.setTime( new Date( Сейчас + Поправка ) );

            месяц = Календарь.get( Calendar.MONTH );
            число = Календарь.get( Calendar.DAY_OF_MONTH ) - 1;

            План = ( Schedules.ОбразПлана ) МенеджерРасписаний.СписокПланов.Элементы.elementAt( Настройки.Расписания.ТекущийПлан );
            N = План.Основной[ месяц ][ число ].intValue();

            Record Запись = ( Record ) МенеджерРасписаний.Данные.Записи.elementAt( N );

            for ( int ii = 0; ii < МенеджерРасписаний.Расписания.size(); ii++ ) {

                Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt(ii);

                if ( Запись.Имя.equals( Расписание.Название ) ) {

                    Настройки.Расписания.ТекущееРасписание = ii;
                }

            }

        }

        // Загрузка таймеров.
        long ВремяСтарта;

        Schedules.LessonClass Урок;
        Schedules.BellClass Звонок;

        Vector МассивЗвонков = new Vector();
        Расписание = ( Schedules.ScheduleClass ) МенеджерРасписаний.Расписания.elementAt( Настройки.Расписания.ТекущееРасписание );

        for ( Enumeration e = Расписание.Уроки.elements(); e.hasMoreElements(); ) {

            Урок = ( Schedules.LessonClass ) e.nextElement();

            for ( Enumeration e1 = Урок.Звонки.elements(); e1.hasMoreElements(); ) {

                Звонок = ( Schedules.BellClass ) e1.nextElement();
                МассивЗвонков.addElement( Звонок );

            }

        }

        Schedule Задание;

        Задания.removeAllElements();

//        long Поправка = Сейчас - МенеджерРасписаний.НачалоРаботы;
//        Поправка /= СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;
        long Поправка = Настройки.Основные.КолвоСуток;
        Поправка *= Настройки.Основные.СуточнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
        Поправка += МенеджерРасписаний.ДобавочнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;

        // Записываем значение поправки в лог программы.
        String Текст;
        String Неделя[] = { "Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб" };
        String ИмяМесяца[] = {
            "Янв", "Фев", "Мар", "Апр", "Май", "Июн",
            "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"
        };

        Календарь.setTime( new Date( МенеджерРасписаний.НачалоРаботы ) );

        int ДеньНедели = Календарь.get( Calendar.DAY_OF_WEEK );
        int Год = Календарь.get( Calendar.YEAR );
        int Месяц = Календарь.get( Calendar.MONTH );
        int Число = Календарь.get( Calendar.DAY_OF_MONTH );
        int Минуты = Календарь.get( Calendar.MINUTE );
        int Часы = Календарь.get( Calendar.HOUR_OF_DAY );
        int Секунды = Календарь.get( Calendar.SECOND );

        Текст = Неделя[ ДеньНедели - 1 ]
            + " "
            + Число
            + " "
            + ИмяМесяца[ Месяц ]
            + " "
            + Год
            + " г.";

        Текст += " в ";

        Текст += ( ( Часы < 10 ) ? "0" : "" ) + Часы
            + ":"
            + ( ( Минуты < 10) ? "0" : "" ) + Минуты
            + ":"
            + ( ( Секунды < 10 ) ? "0" : "" ) + Секунды;

        // Время начала работы программы.
        main.Логгер.info( "[Scheduler.java]: Начало работы: " + Текст );

        // Продолжительность работы программы.
        long Интервал = Сейчас - МенеджерРасписаний.НачалоРаботы + Поправка;

        if ( МенеджерРасписаний.ПервыеСутки != true ) {

            Интервал -= МенеджерРасписаний.ДобавочнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
        }

        int Дни = ( int ) ( Интервал / MonitorForm.МИЛЛСЕК_В_ДЕНЬ );

        Интервал -= Дни * MonitorForm.МИЛЛСЕК_В_ДЕНЬ;
        Часы = ( int ) ( Интервал / MonitorForm.МИЛЛСЕК_В_ЧАС );

        Интервал -= Часы * MonitorForm.МИЛЛСЕК_В_ЧАС;
        Минуты = ( int ) ( Интервал / MonitorForm.МИЛЛСЕК_В_МИН );

        Интервал -= Минуты * MonitorForm.МИЛЛСЕК_В_МИН;
        Секунды = ( int ) ( Интервал / МИЛЛСЕК_В_СЕКУНДЕ );

        Текст = Дни + " сут ";
        Текст += ( ( Часы < 10 ) ? "0" : "" ) + Часы
            + " ч "
            + ( ( Минуты < 10 ) ? "0" : "" ) + Минуты
            + " мин "
            + ( ( Секунды < 10 ) ? "0" : "" ) + Секунды
            + " сек";

        main.Логгер.info( "[Scheduler.java]: Продолжительность: " + Текст );

        // Записываем суточную поправку.
        main.Логгер.info( "[Scheduler.java]: Суточная поправка: "
                + Настройки.Основные.СуточнаяПоправка + " сек" );

        // Записываем добавочную поправку.
        main.Логгер.info( "[Scheduler.java]: Добавочная поправка: "
                + МенеджерРасписаний.ДобавочнаяПоправка + " сек" );

        // Записываем текущую поправку.
        main.Логгер.info( "[Scheduler.java]: Текущая поправка: "
                + ( Поправка / МИЛЛСЕК_В_СЕКУНДЕ ) + " сек" );

        for ( Enumeration e = МассивЗвонков.elements(); e.hasMoreElements();  ){

            Звонок = ( Schedules.BellClass ) e.nextElement();

            Календарь.setTime( new Date( Сейчас + Поправка ) );

            // Заполняем поля календаря временем звонка.
            Календарь.set( Calendar.HOUR_OF_DAY, Звонок.цЧасы );
            Календарь.set( Calendar.MINUTE, Звонок.цМинуты );
            Календарь.set( Calendar.SECOND, Звонок.цСекунды );
            Календарь.set( Calendar.MILLISECOND, 0 );

            ВремяСтарта = Календарь.getTime().getTime() - Поправка;

            Задание = new Schedule( ВремяСтарта, Настройки.Звонки.ДлительностьОсновных, Звонок.Путь );
            Задания.addElement( Задание );

            // Добавить предварительные звонки.
            switch ( Звонок.Тип ) {

                case Schedules.ТИП_НАЧАЛО:

                    // Если установлены предварительные перед начальными звонками.
                    if ( Настройки.Звонки.логПредваритПередНачал ) {

                        Задание = new Schedule(
                            ВремяСтарта - Настройки.Звонки.ВремяДоНачала * 60 * МИЛЛСЕК_В_СЕКУНДЕ,
                            Настройки.Звонки.ДлительностьПредварит,
                            Звонок.Путь2 );

                        Задания.addElement( Задание );

                    }
                    break;

                case Schedules.ТИП_КОНЕЦ:

                    // Если установлены предварительные перед оконечными звонками.
                    if ( Настройки.Звонки.логПредваритПередОконч ) {

                        Задание = new Schedule(
                            ВремяСтарта - Настройки.Звонки.ВремяДоОкончания * 60 * МИЛЛСЕК_В_СЕКУНДЕ,
                            Настройки.Звонки.ДлительностьПредварит,
                            Звонок.Путь2 );

                        Задания.addElement( Задание );
                    }
                    break;

                case Schedules.ТИП_СВОБОДНЫЙ:

                    // Если установлены предварительные перед свободными звонками.
                    //...
                    break;
            }

        }

        if ( ( Настройки.Расписания.Режим == Settings.РЕЖИМ_ГОДОВОЙ_ПЛАН )
            || ( Настройки.Расписания.Режим == Settings.РЕЖИМ_СУТОЧНОЕ_РАСПИСАНИЕ ) ) {

            // Добавляем специальный таймер для смены расписания.
            // В 00 ч 01 мин ( +/- Поправка ) каждый день будет изменяться расписание.
            Календарь.setTime( new Date( Сейчас + Поправка ) );

            // Заполняем поля календаря временем звонка.
            Календарь.set( Calendar.HOUR_OF_DAY, 0 );
            Календарь.set( Calendar.MINUTE, 1 );
            Календарь.set( Calendar.SECOND, 0 );
            Календарь.set( Calendar.MILLISECOND, 0 );

            // Упреждающий старт для таймера смены расписания.
            if ( МенеджерРасписаний.ПервыеСутки == true ) {

                ВремяСтарта = Календарь.getTime().getTime();
                ВремяСтарта += СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;

                long Добавочная = ВремяСтарта - Сейчас;

                Добавочная *= 100;
                Добавочная /= СЕК_В_СУТКИ;
                Добавочная *= Настройки.Основные.СуточнаяПоправка;
                Добавочная /= 100;
                ВремяСтарта -= Добавочная;

            } else {

                // Мы устанавливаем таймер на следующий день, поэтому нужно.
                // стартовать с суточной поправкой.
                ВремяСтарта = Календарь.getTime().getTime() - Поправка ;

                // Время старта этого таймера будет 00 ч 00 мин 35 сек на мониторе, т.к.
                // КоличествоСуток увеличивается чуть позде по коду (см. выше)
                // Поскольку поправка дискретная, то прыжок во времени будет после
                // обновления окна Монитора.
                ВремяСтарта -= Настройки.Основные.СуточнаяПоправка * МИЛЛСЕК_В_СЕКУНДЕ;
                ВремяСтарта += СЕК_В_СУТКИ * МИЛЛСЕК_В_СЕКУНДЕ;

            }

            Задание = new Schedule( ВремяСтарта, Настройки.Звонки.ДлительностьОсновных, "" );
            Задание.Тип = Schedules.ТИП_СМЕНА_РАСПИСАНИЯ;

            // Добавляем в задания, чтобы можно было его остановить.
            Задания.addElement( Задание );

        }

        Сейчас = System.currentTimeMillis();

        for ( int ii = 0; ii < Задания.size(); ii++ ) {

            Задание = ( Schedule ) Задания.elementAt(ii);

            if ( Задание.ВремяСтарта != 0 ) {

                if ( Задание.ВремяСтарта > Сейчас ) {

                    УстановитьТаймер( Задание );
                }

            }

        }

        main.Логгер.info( "[Scheduler.java]: Запуск таймеров. Конец" );
    }


    public void Останов() {

        // Останавливаем и закрываем плеер.
        try { main.ОбновитьПлеер( main.Плеер ); } catch( MediaException МедиаИсключение ) { }

        main.Логгер.info( "[Scheduler.java]: Остановка таймеров." );

        // Остановка и удаление всех таймеров
        for ( Enumeration e = Задания.elements(); e.hasMoreElements();  ){

            Schedule Задание = ( Schedule ) e.nextElement();

            if ( Задание.Таймер != null) {

                Задание.Таймер.cancel();
                Задание.Таймер = null;

            }

        }

        Задания.removeAllElements();
    }

    // </editor-fold>

}
